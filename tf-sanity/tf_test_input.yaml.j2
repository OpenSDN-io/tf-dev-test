{%- if CONTROLLER_NODES is defined and CONTROLLER_NODES|length %}
{%- set CONTROLLER_NODES = CONTROLLER_NODES.split() %}
{%- endif %}
{%- if AGENT_NODES is defined and AGENT_NODES|length %}
{%- set AGENT_NODES = AGENT_NODES.split() %}
{%- endif %}
{%- if OPENSTACK_CONTROLLER_NODES is defined and OPENSTACK_CONTROLLER_NODES|length %}
{%- set OPENSTACK_CONTROLLER_NODES = OPENSTACK_CONTROLLER_NODES.split() %}
{%- endif -%}
{%- if DPDK_AGENT_NODES is defined and DPDK_AGENT_NODES|length %}
{%- set DPDK_AGENT_NODES = DPDK_AGENT_NODES.split() %}
{%- endif -%}
provider_config:
  bms:
    ssh_user: "{{ SSH_USER }}"
    ssh_pwd:
    domainsuffix: "{{ DOMAINSUFFIX }}"

instances:
{%- for node in CONTROLLER_NODES %}
  {{ node | replace(".", "_") }}:
    ip: {{ node }}
    provider: bms
    roles:
      analytics:
{%- if (LEGACY_ANALYTICS_ENABLE | lower) == 'true' %}
      analytics_snmp:
      analytics_alarm:
      analytics_database:
{%- endif %}
      config:
      config_database:
      control:
      webui:
{%- if (ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid') and
       (OPENSTACK_CONTROLLER_NODES is undefined or OPENSTACK_CONTROLLER_NODES|length == 0 or node in OPENSTACK_CONTROLLER_NODES) %}
      openstack:
{%- endif %}
{%- if ORCHESTRATOR == 'kubernetes' or ORCHESTRATOR == 'hybrid' %}
      k8s_master:
      kubemanager:
{%- endif %}
{%- if node in AGENT_NODES %}
      vrouter:
{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
      openstack_compute:
{%- endif %}
{%- if ORCHESTRATOR == 'kubernetes' or ORCHESTRATOR == 'hybrid' %}
      k8s_node:
{%- endif %}
{%- endif %}
{%- endfor %}
{%- if AGENT_NODES is defined and AGENT_NODES|length %}
{%- for node in AGENT_NODES %}
{%- if node not in CONTROLLER_NODES %}
  {{ node | replace(".", "_") }}:
    ip: {{ node }}
    provider: bms
    roles:
      vrouter:
{%- if DPDK_AGENT_NODES is defined and node in DPDK_AGENT_NODES %}
        AGENT_MODE: dpdk
{%- endif %}
{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
      openstack_compute:
{%- endif %}
{%- if ORCHESTRATOR == 'kubernetes' or ORCHESTRATOR == 'hybrid' %}
      k8s_node:
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

{%- if OPENSTACK_CONTROLLER_NODES is defined and OPENSTACK_CONTROLLER_NODES|length %}
{%- for node in OPENSTACK_CONTROLLER_NODES %}
{%- if node not in CONTROLLER_NODES and node not in AGENT_NODES %}
  {{ node | replace(".", "_") }}:
    ip: {{ node }}
    provider: bms
    roles:
      openstack:
{%- endif %}
{%- endfor %}
{%- endif %}

contrail_configuration:
  LOG_LEVEL: SYS_DEBUG
  CONTRAIL_CONTAINER_TAG: {{ CONTRAIL_CONTAINER_TAG }}
{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
  CLOUD_ORCHESTRATOR: openstack
  OPENSTACK_VERSION: {{ OPENSTACK_VERSION }}
  AUTH_MODE: keystone
  KEYSTONE_AUTH_URL_VERSION: /v3
{%- endif %}
{%- if ORCHESTRATOR == 'kubernetes' or ORCHESTRATOR == 'hybrid' %}
  KUBERNETES_PUBLIC_FIP_POOL:
     domain: {{ KUBERNETES_CLUSTER_DOMAIN | default('default-domain') }}
     name: __fip_pool_public__
     network: __public__
     project: {{ KUBERNETES_CLUSTER_PROJECT |  default('k8s-default') }}
{%- endif %}
{%- if SSL_ENABLE == 'true' %}
  # tf-test check flag existense and doesn't check the value
  SSL_ENABLE: "{{ SSL_ENABLE }}"
  RABBITMQ_USE_SSL: "{{ SSL_ENABLE }}"
  CASSANDRA_SSL_ENABLE: "{{ SSL_ENABLE }}"
{%- endif %}
  ANALYTICSDB_ENABLE: "{{ LEGACY_ANALYTICS_ENABLE }}"
  ANALYTICS_ALARM_ENABLE: "{{ LEGACY_ANALYTICS_ENABLE }}"
  ANALYTICS_SNMP_ENABLE: "{{ LEGACY_ANALYTICS_ENABLE }}"
  CONTROLLER_NODES: "{{ CONTROLLER_NODES | join(',') }}"
# Network isolation case.
# services might be on different IPs,
# but list of nodes is still in CONTROLLER_NODES
{%- if CONTROL_NODES is defined and CONTROL_NODES|length  %}
  CONTROL_NODES: "{{ CONTROL_NODES.split(' ') | join(',') }}"
{%- endif %}
{%- if CONFIG_NODES is defined and CONFIG_NODES|length  %}
  CONFIG_NODES: "{{ CONFIG_NODES.split(' ') | join(',') }}"
{%- endif %}
{%- if ANALYTICS_NODES is defined and ANALYTICS_NODES|length  %}
  ANALYTICS_NODES: "{{ ANALYTICS_NODES.split(' ') | join(',') }}"
{%- endif %}
{%- if ANALYTICSDB_NODES is defined and ANALYTICSDB_NODES|length  %}
  ANALYTICSDB_NODES: "{{ ANALYTICSDB_NODES.split(' ') | join(',') }}"
{%- endif %}
{%- if WEBUI_NODES is defined and WEBUI_NODES|length  %}
  WEBUI_NODES: "{{ WEBUI_NODES.split(' ') | join(',') }}"
{%- endif %}
{%- if CONFIG_API_VIP is defined and CONFIG_API_VIP|length  %}
  CONFIG_API_VIP: "{{ CONFIG_API_VIP }}"
{%- endif %}
{%- if ANALYTICS_API_VIP is defined and ANALYTICS_API_VIP|length  %}
  ANALYTICS_API_VIP: "{{ ANALYTICS_API_VIP }}"
{%- endif %}


{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
orchestrator_configuration:
  keystone:
    version: v3
    password: {{ AUTH_PASSWORD }}
{%- if AUTH_DOMAIN %}
    domain: {{ AUTH_DOMAIN }}
{%- endif %}
{%- if AUTH_REGION %}
    region: {{ AUTH_REGION }}
{%- endif %}
{%- endif %}

deployment:
{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
    orchestrator: openstack
{%- else %}
    orchestrator: kubernetes
{%- endif %}
{%- if ORCHESTRATOR == 'hybrid' %}
    additional_orchestrator: kubernetes
{%- endif %}
{%- if DEPLOYER == 'ansible' %}
    deployer: contrail-ansible-deployer
{%- elif DEPLOYER == 'oepnshift3' %}
    deployer: openshift
{%- else %}
    deployer: {{ DEPLOYER }}
{%- endif %}

test_configuration:
    image_web_server: {{ IMAGE_WEB_SERVER }}
    use_project_scoped_token: True
{%- if (ORCHESTRATOR == 'kubernetes' or ORCHESTRATOR == 'hybrid') and KUBE_CONFIG %}
    kube_config_file: "{{ KUBE_CONFIG }}"
{%- endif %}
{%- if ORCHESTRATOR == 'openstack' or ORCHESTRATOR == 'hybrid' %}
{%- if AUTH_PORT %}
    auth_port: {{ AUTH_PORT }}
{%- endif %}
{%- if AUTH_URL %}
{%- if 'v3' in AUTH_URL %}
    auth_url: {{ AUTH_URL }}
{%- else %}
    auth_url: {{ AUTH_URL }}/v3
{%- endif %}
{%- endif %}
{%- if AUTH_DOMAIN %}
    test_domain: {{ AUTH_DOMAIN }}
{%- endif %}
{%- endif %}
{%- if SRIOV_CONFIGURATION is defined and SRIOV_CONFIGURATION|length %}
{%- set SRIOV_CONFIGURATION_ITEMS = SRIOV_CONFIGURATION.split(';') %}

#Special data-structure for tf-test/serial/sriov/*
sriov_configuration:
{%- for item in SRIOV_CONFIGURATION_ITEMS %}
{%- set node, physnets, interface, vf = item.split(':') %}
  {{ SSH_USER }}@{{ node }}:
    - physnets: ['{{ physnets }}']
      interface: '{{ interface }}'
      VF: {{ vf }}
{%- endfor %}
{%- endif -%}

